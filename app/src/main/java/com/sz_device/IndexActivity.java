package com.sz_device;import android.app.ProgressDialog;import android.content.Intent;import android.gesture.Gesture;import android.gesture.GestureLibraries;import android.gesture.GestureLibrary;import android.gesture.GestureOverlayView;import android.gesture.Prediction;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.os.Bundle;import android.os.Environment;import android.text.TextUtils;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.SurfaceView;import android.view.ViewGroup;import android.widget.Button;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import com.bigkoo.alertview.AlertView;import com.bigkoo.alertview.OnItemClickListener;import com.blankj.utilcode.util.ActivityUtils;import com.blankj.utilcode.util.AppUtils;import com.blankj.utilcode.util.NetworkUtils;import com.blankj.utilcode.util.RegexUtils;import com.blankj.utilcode.util.SPUtils;import com.blankj.utilcode.util.TimeUtils;import com.blankj.utilcode.util.ToastUtils;import com.drv.card.CardInfoRk123x;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.jakewharton.rxbinding2.widget.RxTextView;import com.log.Lg;import com.sz_device.EventBus.LockUpEvent;import com.sz_device.EventBus.NetworkEvent;import com.sz_device.EventBus.OpenDoorEvent;import com.sz_device.EventBus.PassEvent;import com.sz_device.EventBus.TemHumEvent;import com.sz_device.Function.Func_Switch.mvp.presenter.SwitchPresenter;import com.sz_device.Retrofit.InterfaceApi.TestNetApi;import com.sz_device.Retrofit.RetrofitGenerator;import com.sz_device.State.DoorState.Door;import com.sz_device.State.DoorState.State_Close;import com.sz_device.State.DoorState.State_Open;import com.sz_device.State.LockState.Lock;import com.sz_device.State.LockState.State_Lockup;import com.sz_device.State.OperationState.Door_Open_OperateState;import com.sz_device.State.OperationState.No_one_OperateState;import com.sz_device.State.OperationState.One_man_OperateState;import com.sz_device.State.OperationState.Operation;import com.sz_device.State.OperationState.Two_man_OperateState;import com.sz_device.Service.SwitchService;import com.sz_device.Tools.DAInfo;import com.sz_device.Tools.FileUtils;import com.sz_device.Tools.NetInfo;import com.sz_device.Tools.PersonType;import com.sz_device.Tools.ServerConnectionUtil;import com.sz_device.Tools.User;import com.sz_device.UI.NormalWindow;import com.sz_device.UI.PasswordInputView;import com.sz_device.UI.SuperWindow;import com.trello.rxlifecycle2.android.ActivityEvent;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.concurrent.TimeUnit;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import io.reactivex.Observable;import io.reactivex.ObservableSource;import io.reactivex.Observer;import io.reactivex.android.schedulers.AndroidSchedulers;import io.reactivex.annotations.NonNull;import io.reactivex.disposables.Disposable;import io.reactivex.functions.Consumer;import io.reactivex.functions.Function;import io.reactivex.schedulers.Schedulers;import okhttp3.OkHttpClient;import okhttp3.ResponseBody;import retrofit2.Retrofit;import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;import retrofit2.converter.gson.GsonConverterFactory;/** * Created by zbsz on 2017/8/25. */public class IndexActivity extends FunctionActivity implements NormalWindow.OptionTypeListener, SuperWindow.OptionTypeListener {    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    private SPUtils config = SPUtils.getInstance("config");    private SPUtils staticIP = SPUtils.getInstance("staticIP");    String TAG = "IndexActivity";    Intent intent;    Disposable checkChange;    Disposable disposableTips;    User cg_User1 = new User();    User cg_User2 = new User();    User unknownUser = new User();    private NormalWindow normalWindow;    private SuperWindow superWindow;    No_one_OperateState no_one_operateState = new No_one_OperateState();    @BindView(R.id.img_captured)    ImageView captured;    @BindView(R.id.tv_info)    TextView tv_info;    @BindView(R.id.iv_network)    ImageView iv_network;    @BindView(R.id.iv_lock)    ImageView iv_lock;    @BindView(R.id.tv_time)    TextView tv_time;    @BindView(R.id.tv_temp)    TextView tv_temperature;    @BindView(R.id.tv_humid)    TextView tv_humidity;    Operation global_Operation;    @OnClick(R.id.iv_network)    void option() {        passwordInputView.setText(null);        passwordAlert.show();    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_index);        ButterKnife.bind(this);        EventBus.getDefault().register(this);        openService();        surfaceView = (SurfaceView) findViewById(R.id.surfaceView);        disposableTips = RxTextView.textChanges(tv_info)                .debounce(60, TimeUnit.SECONDS)                .switchMap(new Function<CharSequence, ObservableSource<String>>() {                    @Override                    public ObservableSource<String> apply(@NonNull CharSequence charSequence) throws Exception {                        return Observable.just("等待用户操作");                    }                })                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Consumer<String>() {                    @Override                    public void accept(@NonNull String s) throws Exception {                        tv_info.setText(s);                    }                });        global_Operation = new Operation(no_one_operateState);        setGestures();        IpviewInit();        serverInit();        PasswordViewInit();        messageInit();        autoUpdate();    }    private void autoUpdate() {        new ServerConnectionUtil().download("http://124.172.232.89:8050/daServer/updateADA.do?ver=" + AppUtils.getAppVersionName() + "&daid=" + config.getString("daid") + "&url=" + config.getString("ServerId"), new ServerConnectionUtil.Callback() {            @Override            public void onResponse(String response) {                if (response != null) {                    if (response.equals("true")) {                        AppUtils.installApp(new File(Environment.getExternalStorageDirectory().getPath() + File.separator + "Download" + File.separator + "app-release.apk"), "application/vnd.android.package-archive");                    }                }            }        });    }    @BindView(R.id.gestures_overlay)    GestureOverlayView gestures;    GestureLibrary mGestureLib;    private void setGestures() {        gestures.setGestureStrokeType(GestureOverlayView.GESTURE_STROKE_TYPE_MULTIPLE);        gestures.setGestureVisible(false);        gestures.addOnGesturePerformedListener(new GestureOverlayView.OnGesturePerformedListener() {            @Override            public void onGesturePerformed(GestureOverlayView overlay,                                           Gesture gesture) {                ArrayList<Prediction> predictions = mGestureLib.recognize(gesture);                if (predictions.size() > 0) {                    Prediction prediction = (Prediction) predictions.get(0);                    // 匹配的手势                    if (prediction.score > 1.0) { // 越匹配score的值越大，最大为10                        if (prediction.name.equals("setting")) {                            NetworkUtils.openWirelessSettings();                        }                    }                }            }        });        if (mGestureLib == null) {            mGestureLib = GestureLibraries.fromRawResource(this, R.raw.gestures);            mGestureLib.load();        }    }    @OnClick(R.id.iv_lock)    void showMessage() {        msg_daid.setText("设备ID：" + config.getString("daid"));        msg_ip.setText("IP地址：" + NetworkUtils.getIPAddress(true));        msg_mac.setText("MAC地址：" + new NetInfo().getMac());        msg_software.setText("软件版本号：" + AppUtils.getAppVersionName());        if (staticIP.getBoolean("state")) {            msg_ipmode.setText("当前以太网为静态IP模式");        } else {            msg_ipmode.setText("当前以太网为动态IP获取模式");        }        if (NetworkUtils.isConnected()) {            msg_network.setText("连接网络成功");        } else {            msg_network.setText("连接网络失败，请检查网线连接状态");        }        msg_iccard.setText("请放置IC卡进行判断");        if (Door.getInstance().getDoorState().getClass().getName().equals(State_Open.class.getName())) {            msg_doorState.setText("仓库门处于开启状态");        } else {            msg_doorState.setText("仓库门处于关闭状态");        }        if (Lock.getInstance().getLockState().getClass().getName().equals(State_Lockup.class.getName())) {            msg_lockState.setText("仓库处于上锁状态");        } else {            msg_lockState.setText("仓库处于解锁状态");        }        messageAlert.show();    }    private AlertView messageAlert;    private TextView msg_daid;    private TextView msg_ip;    private TextView msg_mac;    private TextView msg_software;    private TextView msg_ipmode;    private TextView msg_network;    private TextView msg_iccard;    private TextView msg_lockState;    private TextView msg_doorState;    private void messageInit() {        ViewGroup messageView = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.message_form, null);        msg_daid = (TextView) messageView.findViewById(R.id.msg_daid);        msg_ip = (TextView) messageView.findViewById(R.id.msg_ip);        msg_mac = (TextView) messageView.findViewById(R.id.msg_mac);        msg_software = (TextView) messageView.findViewById(R.id.msg_software);        msg_ipmode = (TextView) messageView.findViewById(R.id.msg_ipmode);        msg_network = (TextView) messageView.findViewById(R.id.msg_network);        msg_iccard = (TextView) messageView.findViewById(R.id.msg_iccard);        msg_lockState = (TextView) messageView.findViewById(R.id.msg_lockState);        msg_doorState = (TextView) messageView.findViewById(R.id.msg_doorState);        messageAlert = new AlertView("信息显示", null, null, new String[]{"确定"}, null, this, AlertView.Style.Alert, new OnItemClickListener() {            @Override            public void onItemClick(Object o, int position) {            }        });        messageAlert.addExtView(messageView);    }    String url;    private AlertView inputServerView;    private EditText etName;    private ImageView QRview;    private void serverInit() {        ViewGroup extView1 = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.inputserver_form, null);        etName = (EditText) extView1.findViewById(R.id.server_input);        QRview = (ImageView) extView1.findViewById(R.id.QRimage);        inputServerView = new AlertView("服务器设置", null, "取消", new String[]{"确定"}, null, this, AlertView.Style.Alert, new OnItemClickListener() {            @Override            public void onItemClick(Object o, int position) {                if (position == 0) {                    if (!etName.getText().toString().replaceAll(" ", "").endsWith("/")) {                        url = etName.getText().toString() + "/";                    } else {                        url = etName.getText().toString();                    }                    OkHttpClient client = new OkHttpClient.Builder().connectTimeout(15, TimeUnit.SECONDS)                            .writeTimeout(30, TimeUnit.SECONDS)                            .readTimeout(30, TimeUnit.SECONDS)                            .build();                    new Retrofit.Builder()                            .addConverterFactory(GsonConverterFactory.create())                            .addCallAdapterFactory(RxJava2CallAdapterFactory.create())                            .baseUrl(url).client(client).build().create(TestNetApi.class)                            .testNet("testNet", config.getString("key"))                            .subscribeOn(Schedulers.io())                            .unsubscribeOn(Schedulers.io())                            .observeOn(AndroidSchedulers.mainThread())                            .subscribe(new Observer<String>() {                                @Override                                public void onSubscribe(@NonNull Disposable d) {                                }                                @Override                                public void onNext(String s) {                                    if (s.equals("true")) {                                        config.put("ServerId", url);                                        ToastUtils.showLong("连接服务器成功");                                    } else {                                        ToastUtils.showLong("连接服务器失败");                                    }                                }                                @Override                                public void onError(@NonNull Throwable e) {                                    ToastUtils.showLong("服务器连接失败");                                }                                @Override                                public void onComplete() {                                }                            });                }            }        });        inputServerView.addExtView(extView1);    }    private AlertView inputStaticIPView;    long count = 5;    EditText et_Static_ip;    EditText et_Static_mask;    EditText et_Static_gateway;    EditText et_Static_dns1;    EditText et_Static_dns2;    CheckBox ipCheckBox;    private void IpviewInit() {        ViewGroup ipview = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.inputstaticip_form, null);        ipCheckBox = (CheckBox) ipview.findViewById(R.id.ip_checkBox);        et_Static_ip = (EditText) ipview.findViewById(R.id.static_ip);        et_Static_mask = (EditText) ipview.findViewById(R.id.static_mask);        et_Static_gateway = (EditText) ipview.findViewById(R.id.static_gateway);        et_Static_dns1 = (EditText) ipview.findViewById(R.id.static_DNS1);        et_Static_dns2 = (EditText) ipview.findViewById(R.id.static_DNS2);        ipCheckBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (isChecked) {                    et_Static_ip.setEnabled(true);                    et_Static_mask.setEnabled(true);                    et_Static_gateway.setEnabled(true);                    et_Static_dns1.setEnabled(true);                    et_Static_dns2.setEnabled(true);                } else {                    et_Static_ip.setEnabled(false);                    et_Static_mask.setEnabled(false);                    et_Static_gateway.setEnabled(false);                    et_Static_dns1.setEnabled(false);                    et_Static_dns2.setEnabled(false);                }            }        });        inputStaticIPView = new AlertView("设置静态IP", null, "取消", new String[]{"确定"}, null, IndexActivity.this, AlertView.Style.Alert, new OnItemClickListener() {            @Override            public void onItemClick(Object o, int position) {                if (position == 0) {                    if (ipCheckBox.isChecked()) {                        if (RegexUtils.isIP(et_Static_ip.getText().toString()) ||                                RegexUtils.isIP(et_Static_mask.getText().toString()) ||                                RegexUtils.isIP(et_Static_gateway.getText().toString()) ||                                RegexUtils.isIP(et_Static_dns1.getText().toString()) ||                                RegexUtils.isIP(et_Static_dns2.getText().toString())) {                            staticIP.put("Static_ip", et_Static_ip.getText().toString());                            staticIP.put("Static_mask", et_Static_mask.getText().toString());                            staticIP.put("Static_gateway", et_Static_gateway.getText().toString());                            staticIP.put("Static_dns1", et_Static_dns1.getText().toString());                            staticIP.put("Static_dns2", et_Static_dns2.getText().toString());                            staticIP.put("state", true);                            AppInit.getMyManager().setStaticEthIPAddress/*ssetEthIPAddress*/(et_Static_ip.getText().toString(),                                    et_Static_gateway.getText().toString(), et_Static_mask.getText().toString(),                                    et_Static_dns1.getText().toString(), et_Static_dns2.getText().toString());                            ToastUtils.showLong("静态IP已设置");                            Observable.interval(0, 1, TimeUnit.SECONDS)                                    .take(count + 1)                                    .map(new Function<Long, Long>() {                                        @Override                                        public Long apply(@NonNull Long aLong) throws Exception {                                            return count - aLong;                                        }                                    })                                    .subscribeOn(Schedulers.io())                                    .observeOn(AndroidSchedulers.mainThread())                                    .subscribe(new Observer<Long>() {                                        @Override                                        public void onSubscribe(@NonNull Disposable d) {                                        }                                        @Override                                        public void onNext(@NonNull Long aLong) {                                            ToastUtils.showLong(aLong + "秒后重新开机保存设置");                                        }                                        @Override                                        public void onError(@NonNull Throwable e) {                                        }                                        @Override                                        public void onComplete() {                                            pp.close_Camera();                                            AppInit.getMyManager().reboot();                                        }                                    });                        } else {                            ToastUtils.showLong("IP地址输入格式有误，请重试");                        }                    } else {                        AppInit.getMyManager().setDhcpIpAddress(AppInit.getContext());                        ToastUtils.showLong("已设置为动态IP获取模式");                        staticIP.put("state", false);                        Observable.interval(0, 1, TimeUnit.SECONDS)                                .take(count + 1)                                .map(new Function<Long, Long>() {                                    @Override                                    public Long apply(@NonNull Long aLong) throws Exception {                                        return count - aLong;                                    }                                })                                .subscribeOn(Schedulers.io())                                .observeOn(AndroidSchedulers.mainThread())                                .subscribe(new Observer<Long>() {                                    @Override                                    public void onSubscribe(@NonNull Disposable d) {                                    }                                    @Override                                    public void onNext(@NonNull Long aLong) {                                        ToastUtils.showLong(aLong + "秒后重新开机保存设置");                                    }                                    @Override                                    public void onError(@NonNull Throwable e) {                                    }                                    @Override                                    public void onComplete() {                                        pp.close_Camera();                                        AppInit.getMyManager().reboot();                                    }                                });                    }                }            }        });        inputStaticIPView.addExtView(ipview);    }    private AlertView passwordAlert;    private PasswordInputView passwordInputView;    private void PasswordViewInit() {        ViewGroup passwordView = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.inputpassword_form, null);        passwordInputView = (PasswordInputView) passwordView.findViewById(R.id.passwordInputView);        passwordAlert = new AlertView("通知", "请输入密码以进入设置界面", "取消", new String[]{"确定"}, null, IndexActivity.this, AlertView.Style.Alert, new OnItemClickListener() {            @Override            public void onItemClick(Object o, int position) {                if (position == 0) {                    if (passwordInputView.getText().toString().equals("123654")) {                        normalWindow = new NormalWindow(IndexActivity.this);                        normalWindow.setOptionTypeListener(IndexActivity.this);                        normalWindow.showAtLocation(getWindow().getDecorView().findViewById(android.R.id.content), Gravity.CENTER, 0, 0);                    } else if (passwordInputView.getText().toString().equals("665901")) {                        superWindow = new SuperWindow(IndexActivity.this);                        superWindow.setOptionTypeListener(IndexActivity.this);                        superWindow.showAtLocation(getWindow().getDecorView().findViewById(android.R.id.content), Gravity.CENTER, 0, 0);                    } else {                        ToastUtils.showLong("密码错误，请重试");                    }                }            }        });        passwordAlert.addExtView(passwordView);    }    void openService() {        intent = new Intent(IndexActivity.this, SwitchService.class);        startService(intent);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetTemHumEvent(TemHumEvent event) {        tv_temperature.setText(event.getTem() + "℃");        tv_humidity.setText(event.getHum() + "%");    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetNetworkEvent(NetworkEvent event) {        if (event.getNetwork_state()) {            iv_network.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.wifi));        } else {            iv_network.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.non_wifi));        }    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetOpenDoorEvent(OpenDoorEvent event) {        OpenDoorRecord(event.getLegal());        if (checkChange!= null){            checkChange.dispose();        }        if (!getState(Door_Open_OperateState.class)){            global_Operation.setState(no_one_operateState);        }    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onGetLockUpEvent(LockUpEvent event) {        iv_lock.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_lockup));        cg_User1 = new User();        cg_User2 = new User();        global_Operation.setState(no_one_operateState);    }    @Override    public void onResume() {        super.onResume();        cg_User1 = new User();        cg_User2 = new User();        global_Operation.setState(no_one_operateState);        tv_info.setText("等待用户操作");        Observable.interval(0, 1, TimeUnit.SECONDS)                .observeOn(AndroidSchedulers.mainThread())                .compose(this.<Long>bindUntilEvent(ActivityEvent.PAUSE))                .subscribe(new Consumer<Long>() {                    @Override                    public void accept(@NonNull Long aLong) throws Exception {                        tv_time.setText(formatter.format(new Date(System.currentTimeMillis())));                    }                });        Observable.interval(24, 24, TimeUnit.HOURS)                .observeOn(AndroidSchedulers.mainThread())                .compose(this.<Long>bindUntilEvent(ActivityEvent.PAUSE))                .subscribe(new Consumer<Long>() {                    @Override                    public void accept(@NonNull Long aLong) throws Exception {                        syncTime();                    }                });    }    @Override    protected void onDestroy() {        super.onDestroy();        EventBus.getDefault().unregister(this);        //stopService(intent);        disposableTips.dispose();    }    @Override    public void onSuperOptionType(Button view, int type) {        superWindow.dismiss();        if (type == 1) {            ActivityUtils.startActivity(getPackageName(), getPackageName() + ".AddPersonActivity");        } else if (type == 2) {            Bitmap mBitmap = null;            etName.setText(config.getString("ServerId"));            DAInfo di = new DAInfo();            try {                di.setId(config.getString("daid"));                di.setName("数据采集器");                di.setModel("CBDI-P-IC");                di.setSoftwareVer(AppUtils.getAppVersionName());                di.setProject("SZ");                mBitmap = di.daInfoBmp();            } catch (Exception ex) {            }            if (mBitmap != null) {                QRview.setImageBitmap(mBitmap);            }            inputServerView.show();        } else if (type == 3) {            ViewGroup extView2 = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.inputdevid_form, null);            final EditText et_devid = (EditText) extView2.findViewById(R.id.devid_input);            new AlertView("设备信息同步", null, "取消", new String[]{"确定"}, null, IndexActivity.this, AlertView.Style.Alert, new OnItemClickListener() {                @Override                public void onItemClick(Object o, int position) {                    if (position == 0) {                        if (TextUtils.isEmpty(et_devid.getText().toString())) {                            ToastUtils.showLong("您的输入为空请重试");                        } else {                            fpp.fpCancel(true);                            equipment_sync(et_devid.getText().toString());                        }                    }                }            }).addExtView(extView2).show();        } else if (type == 4) {            if (staticIP.getBoolean("state")) {                ipCheckBox.setChecked(true);            } else {                ipCheckBox.setChecked(false);            }            if (!TextUtils.isEmpty(staticIP.getString("Static_ip"))) {                et_Static_ip.setText(staticIP.getString("Static_ip"));                et_Static_gateway.setText(staticIP.getString("Static_gateway"));                et_Static_mask.setText(staticIP.getString("Static_mask"));                et_Static_dns1.setText(staticIP.getString("Static_dns1"));                et_Static_dns2.setText(staticIP.getString("Static_dns2"));            }            if (ipCheckBox.isChecked()) {                et_Static_ip.setEnabled(true);                et_Static_mask.setEnabled(true);                et_Static_gateway.setEnabled(true);                et_Static_dns1.setEnabled(true);                et_Static_dns2.setEnabled(true);            }            inputStaticIPView.show();        } else if (type == 5) {            ViewGroup deleteView = (ViewGroup) LayoutInflater.from(this).inflate(R.layout.delete_person_form, null);            final EditText et_idcard = (EditText) deleteView.findViewById(R.id.idcard_input);            final EditText et_finger = (EditText) deleteView.findViewById(R.id.et_finger);            new AlertView("删除人员指纹信息", null, "取消", new String[]{"确定"}, null, IndexActivity.this, AlertView.Style.Alert, new OnItemClickListener() {                @Override                public void onItemClick(Object o, int position) {                    if (position == 0) {                        if (TextUtils.isEmpty(et_idcard.getText().toString()) || TextUtils.isEmpty(et_finger.getText().toString())) {                            ToastUtils.showLong("您的输入为空请重试");                        } else {                            deletePerson(et_idcard.getText().toString(), et_finger.getText().toString());                        }                    }                }            }).addExtView(deleteView).show();        }    }    @Override    public void onOptionType(Button view, int type) {        normalWindow.dismiss();        if (type == 1) {            ActivityUtils.startActivity(getPackageName(), getPackageName() + ".AddPersonActivity");        } else if (type == 2) {            if (staticIP.getBoolean("state")) {                ipCheckBox.setChecked(true);            } else {                ipCheckBox.setChecked(false);            }            if (!TextUtils.isEmpty(staticIP.getString("Static_ip"))) {                et_Static_ip.setText(staticIP.getString("Static_ip"));                et_Static_gateway.setText(staticIP.getString("Static_gateway"));                et_Static_mask.setText(staticIP.getString("Static_mask"));                et_Static_dns1.setText(staticIP.getString("Static_dns1"));                et_Static_dns2.setText(staticIP.getString("Static_dns2"));            }            if (ipCheckBox.isChecked()) {                et_Static_ip.setEnabled(true);                et_Static_mask.setEnabled(true);                et_Static_gateway.setEnabled(true);                et_Static_dns1.setEnabled(true);                et_Static_dns2.setEnabled(true);            }            inputStaticIPView.show();        }    }    @Override    public void onCaremaText(String s) {    }    @Override    public void onSetImg(Bitmap bmp) {    }    @Override    public void onText(String msg) {        if ("请确认指纹是否已登记".equals(msg)) {            tv_info.setText("请确认指纹是否已登记,再重试");        } else if ("松开手指".equals(msg)) {            tv_info.setText(msg);        }    }    @Override    public void onFpSucc(String msg) {        /*if(passwordAlert.isShowing()){            tv_info.setText("设置密码已解除");            passwordInputView.setText("123654");            passwordAlert.dismiss();            normalWindow = new NormalWindow(IndexActivity.this);            normalWindow.setOptionTypeListener(IndexActivity.this);            normalWindow.showAtLocation(getWindow().getDecorView().findViewById(android.R.id.content), Gravity.CENTER, 0, 0);        }else{            loadMessage(msg.substring(3, msg.length()));        }*/        loadMessage(msg.substring(3, msg.length()));    }    private void loadMessage(String sp) {        if (SPUtils.getInstance(sp).getString("courType").equals(PersonType.KuGuan)) {            if (getState(No_one_OperateState.class)) {                global_Operation.setState(new One_man_OperateState());                pp.capture();                cg_User1.setCourIds(SPUtils.getInstance(sp).getString("courIds"));                cg_User1.setName(SPUtils.getInstance(sp).getString("name"));                cg_User1.setCardId(SPUtils.getInstance(sp).getString("cardId"));                cg_User1.setFingerprintId(sp);                cg_User1.setCourType(SPUtils.getInstance(sp).getString("courType"));            } else if (getState(Two_man_OperateState.class)) {                if (!SPUtils.getInstance(sp).getString("cardId").equals(cg_User1.getCardId())) {                    cg_User2.setCourIds(SPUtils.getInstance(sp).getString("courIds"));                    cg_User2.setName(SPUtils.getInstance(sp).getString("name"));                    cg_User2.setCardId(SPUtils.getInstance(sp).getString("cardId"));                    cg_User2.setFingerprintId(sp);                    pp.capture();                    EventBus.getDefault().post(new PassEvent());                    iv_lock.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_lock_unlock));                } else {                    tv_info.setText("请不要连续输入相同的管理员信息");                }            } else if (getState(Door_Open_OperateState.class)) {                tv_info.setText("仓库门已打开");            }        } else if (SPUtils.getInstance(sp).getString("courType").equals(PersonType.XunJian)) {            if (checkChange != null) {                checkChange.dispose();            }            cg_User1.setCourIds(SPUtils.getInstance(sp).getString("courIds"));            cg_User1.setName(SPUtils.getInstance(sp).getString("name"));            cg_User1.setCardId(SPUtils.getInstance(sp).getString("cardId"));            cg_User1.setFingerprintId(sp);            cg_User1.setCourType(SPUtils.getInstance(sp).getString("courType"));            checkRecord(String.valueOf(2));        } else {            unknownUser.setName(SPUtils.getInstance(sp).getString("name"));            unknownUser.setCardId(SPUtils.getInstance(sp).getString("cardId"));            unknownUser.setFingerprintId(sp);            pp.capture();        }    }    @Override    public void onGetPhoto(Bitmap bmp) {        Matrix matrix = new Matrix();        matrix.postScale(0.5f, 0.5f);        bmp = Bitmap.createBitmap(bmp, 0, 0, bmp.getWidth(), bmp.getHeight(), matrix, true);        if (unknownUser.getCardId() != null) {            unknownPeople(bmp);        }        if (getState(One_man_OperateState.class)) {            cg_User1.setPhoto(FileUtils.bitmapToBase64(bmp));            if(cg_User1.getFingerprintId()!=null){                tv_info.setText("管理员" + cg_User1.getName() + "打卡,请继续管理员操作,指纹ID为" + cg_User1.getFingerprintId());            }else{                tv_info.setText("管理员" + cg_User1.getName() + "打卡,请继续管理员操作");            }            global_Operation.doNext(new Operation.Callback_Operation() {                @Override                public void uploadCallback() {                    pp.setDisplay(surfaceView.getHolder());                }            });            Observable.timer(60, TimeUnit.SECONDS).subscribeOn(Schedulers.newThread())                    .compose(this.<Long>bindUntilEvent(ActivityEvent.PAUSE))                    .observeOn(AndroidSchedulers.mainThread())                    .subscribe(new Observer<Long>() {                        @Override                        public void onSubscribe(Disposable d) {                            checkChange = d;                        }                        @Override                        public void onNext(Long aLong) {                            checkRecord(String.valueOf(1));                        }                        @Override                        public void onError(Throwable e) {                        }                        @Override                        public void onComplete() {                        }                    });        } else if (getState(Two_man_OperateState.class)) {            if (checkChange != null) {                checkChange.dispose();            }            if(cg_User2.getFingerprintId()!=null){                tv_info.setText("管理员" + cg_User2.getName() + "打卡，双人管理成功,指纹ID为" + cg_User2.getFingerprintId());            }else{                tv_info.setText("管理员" + cg_User2.getName() + "打卡，双人管理成功");            }            cg_User2.setPhoto(FileUtils.bitmapToBase64(bmp));            global_Operation.doNext(new Operation.Callback_Operation() {                @Override                public void uploadCallback() {                    global_Operation.setState(new Door_Open_OperateState());                    pp.setDisplay(surfaceView.getHolder());                }            });        }        captured.setImageBitmap(bmp);        Observable.timer(1, TimeUnit.SECONDS)                .observeOn(AndroidSchedulers.mainThread())                .compose(this.<Long>bindUntilEvent(ActivityEvent.PAUSE))                .subscribeOn(Schedulers.newThread())                .subscribe(new Consumer<Long>() {                    @Override                    public void accept(@NonNull Long aLong) throws Exception {                        captured.setImageBitmap(null);                    }                });    }    @Override    public void onsetCardInfo(CardInfoRk123x cardInfo) {        if (messageAlert.isShowing()) {            msg_iccard.setText("IC卡功能正常");        } else {            JSONObject jsonObject = new JSONObject();            try {                jsonObject.put("ickBh", cardInfo.getUid());            } catch (JSONException e) {                e.printStackTrace();            }            RetrofitGenerator.getSearchICKBdApi().searchICKBd("searchICKBd",config.getString("key"),jsonObject.toString())                    .subscribeOn(Schedulers.io())                    .unsubscribeOn(Schedulers.io())                    .observeOn(AndroidSchedulers.mainThread())                    .subscribe(new Observer<ResponseBody>() {                        @Override                        public void onSubscribe(@NonNull Disposable d) {                        }                        @Override                        public void onNext(ResponseBody responseBody) {                            try {                                JSONObject jsonObject = new JSONObject(responseBody.string().toString());                                if (jsonObject.getString("result").equals("true")) {                                    JSONObject jsonArray = jsonObject.getJSONObject("data");                                    if (Integer.parseInt(jsonArray.getString("courType")) == 2){                                        cg_User1.setCourIds(jsonArray.getString("courids"));                                        cg_User1.setCardId(jsonArray.getString("idcard"));                                        cg_User1.setName(jsonArray.getString("name"));                                        checkRecord(jsonArray.getString("courType"));                                    }else if(Integer.parseInt(jsonArray.getString("courType")) == 1){                                        if (getState(No_one_OperateState.class)) {                                            global_Operation.setState(new One_man_OperateState());                                            pp.capture();                                            cg_User1.setCourIds(jsonArray.getString("courids"));                                            cg_User1.setName(jsonArray.getString("name"));                                            cg_User1.setCardId(jsonArray.getString("idcard"));                                        } else if (getState(Two_man_OperateState.class)) {                                            if (!jsonArray.getString("idcard").equals(cg_User1.getCardId())) {                                                cg_User2.setCourIds(jsonArray.getString("courids"));                                                cg_User2.setName(jsonArray.getString("name"));                                                cg_User2.setCardId(jsonArray.getString("idcard"));                                                pp.capture();                                                EventBus.getDefault().post(new PassEvent());                                                iv_lock.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.drawable.ic_lock_unlock));                                            } else {                                                tv_info.setText("请不要连续输入相同的管理员信息");                                            }                                        } else if (getState(Door_Open_OperateState.class)) {                                            tv_info.setText("仓库门已打开");                                        }                                    }                                }else{                                    tv_info.setText("您的IC卡没有登记备案，请更换IC卡重试");                                }                            } catch (IOException e) {                                e.printStackTrace();                            } catch( JSONException exception){                                exception.printStackTrace();                            }                        }                        @Override                        public void onError(@NonNull Throwable e) {                            tv_info.setText("服务器连接失败，无法辨别IC卡的有效性");                        }                        @Override                        public void onComplete() {                        }                    });        }    }    @Override    public void onsetCardImg(Bitmap bmp) {    }    @Override    public void onBackPressed() {        super.onBackPressed();    }    private Boolean getState(Class stateClass) {        if (global_Operation.getState().getClass().getName().equals(stateClass.getName())) {            return true;        } else {            return false;        }    }    private void syncTime() {        RetrofitGenerator.getTimeApi().getTime("getTime", config.getString("key"))                .subscribeOn(Schedulers.io()).unsubscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread()).subscribe(new Observer<String>() {            @Override            public void onSubscribe(Disposable d) {            }            @Override            public void onNext(String s) {                String datetime = s;                AppInit.getMyManager().setTime(Integer.parseInt(datetime.substring(0, 4)), Integer.parseInt(datetime.substring(5, 7))                        , Integer.parseInt(datetime.substring(8, 10)), Integer.parseInt(datetime.substring(11, 13)), Integer.parseInt(datetime.substring(14, 16)));            }            @Override            public void onError(Throwable e) {                ToastUtils.showLong(e.toString());            }            @Override            public void onComplete() {            }        });    }    private void deletePerson(String idcard, final String fingerId) {        JSONObject jsonObject = new JSONObject();        try {            jsonObject.put("id", idcard);            jsonObject.put("fingerprintId", fingerId);        } catch (JSONException e) {            e.printStackTrace();        }        final ProgressDialog progressDialog = new ProgressDialog(IndexActivity.this);        RetrofitGenerator.getDeleteFingerApi().deleteFinger("deleteFinger", config.getString("key"), jsonObject.toString())                .subscribeOn(Schedulers.io())                .unsubscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Observer<String>() {                    @Override                    public void onSubscribe(@NonNull Disposable d) {                        progressDialog.setMessage("数据上传中，请稍候");                        progressDialog.show();                    }                    @Override                    public void onNext(String s) {                        progressDialog.dismiss();                        if (s.equals("true")) {                            fpp.fpCancel(true);                            Observable.timer(2, TimeUnit.SECONDS).observeOn(AndroidSchedulers.mainThread())                                    .subscribe(new Consumer<Long>() {                                        @Override                                        public void accept(Long aLong) throws Exception {                                            fpp.fpRemoveTmpl(fingerId);                                            SPUtils.getInstance(fingerId).clear();                                            fpp.fpIdentify();                                        }                                    });                            ToastUtils.showLong("删除成功");                        } else if (s.equals("false")) {                            ToastUtils.showLong("删除失败");                        } else if (s.equals("dataErr")) {                            ToastUtils.showLong("服务出错");                        } else if (s.equals("dbErr")) {                            ToastUtils.showLong("数据库出错");                        }                    }                    @Override                    public void onError(@NonNull Throwable e) {                        progressDialog.dismiss();                    }                    @Override                    public void onComplete() {                    }                });    }    private void checkRecord(String type) {        JSONObject jsonObject = new JSONObject();        try {            jsonObject.put("id", cg_User1.getCardId());            jsonObject.put("name", cg_User1.getName());            jsonObject.put("checkType", type);            jsonObject.put("datetime", TimeUtils.getNowString());        } catch (JSONException e) {            e.printStackTrace();        }        final ProgressDialog progressDialog = new ProgressDialog(IndexActivity.this);        RetrofitGenerator.getCheckRecordApi().checkRecord("checkRecord", config.getString("key"), jsonObject.toString())                .subscribeOn(Schedulers.io())                .unsubscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Observer<String>() {                    @Override                    public void onSubscribe(@NonNull Disposable d) {                        progressDialog.setMessage("数据上传中，请稍候");                        progressDialog.show();                    }                    @Override                    public void onNext(String s) {                        if (s.equals("true")) {                            if(cg_User1.getFingerprintId()!= null){                                tv_info.setText("巡检员" + cg_User1.getName() + "巡检成功,指纹ID为"+cg_User1.getFingerprintId());                            }else{                                tv_info.setText("巡检员" + cg_User1.getName() + "巡检成功");                            }                        } else if (s.equals("false")) {                            tv_info.setText("巡检失败");                        } else if (s.equals("dataErr")) {                            tv_info.setText("上传巡检数据失败");                        } else if (s.equals("dataErr")) {                            tv_info.setText("数据库操作有错");                        }                    }                    @Override                    public void onError(@NonNull Throwable e) {                        progressDialog.dismiss();                        tv_info.setText("无法连接到服务器");                    }                    @Override                    public void onComplete() {                        progressDialog.dismiss();                        cg_User1 = new User();                        cg_User2 = new User();                        if (!getState(Two_man_OperateState.class) || !getState(Door_Open_OperateState.class)) {                            global_Operation.setState(new No_one_OperateState());                        }                        SwitchPresenter.getInstance().OutD9(false);                    }                });    }    private void unknownPeople(Bitmap bmp) {        JSONObject jsonObject = new JSONObject();        try {            jsonObject.put("visitIdcard", unknownUser.getCardId());            jsonObject.put("visitName", unknownUser.getName());            jsonObject.put("photos", FileUtils.bitmapToBase64(bmp));        } catch (JSONException e) {            e.printStackTrace();        }        final ProgressDialog progressDialog = new ProgressDialog(IndexActivity.this);        RetrofitGenerator.getSaveVisitApi().saveVisit("saveVisit", config.getString("key"), jsonObject.toString())                .subscribeOn(Schedulers.io())                .unsubscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Observer<String>() {                    @Override                    public void onSubscribe(@NonNull Disposable d) {                        progressDialog.setMessage("数据上传中，请稍候");                        progressDialog.show();                    }                    @Override                    public void onNext(String s) {                        if (!getState(Two_man_OperateState.class) || !getState(Door_Open_OperateState.class)) {                            global_Operation.setState(new No_one_OperateState());                        }                        if (s.equals("true")) {                            tv_info.setText("访问人" + unknownUser.getName() + "数据上传成功,指纹号为" + unknownUser.getFingerprintId());                        } else if (s.equals("false")) {                            tv_info.setText("访问人上传失败");                        } else if (s.equals("dataErr")) {                            tv_info.setText("上传访问人数据失败");                        } else if (s.equals("dataErr")) {                            tv_info.setText("数据库操作有错");                        }                        unknownUser = new User();                    }                    @Override                    public void onError(@NonNull Throwable e) {                        progressDialog.dismiss();                        tv_info.setText("无法连接到服务器");                        unknownUser = new User();                        pp.setDisplay(surfaceView.getHolder());                    }                    @Override                    public void onComplete() {                        progressDialog.dismiss();                        pp.setDisplay(surfaceView.getHolder());                    }                });    }    private void equipment_sync(String old_devid) {        JSONObject jsonObject = new JSONObject();        try {            jsonObject.put("oldDaid", old_devid);        } catch (JSONException e) {            e.printStackTrace();        }        final ProgressDialog progressDialog = new ProgressDialog(IndexActivity.this);        RetrofitGenerator.getSearchFingerApi().searchFinger("searchFinger", config.getString("key"), jsonObject.toString())                .subscribeOn(Schedulers.io())                .unsubscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Observer<ResponseBody>() {                    @Override                    public void onSubscribe(@NonNull Disposable d) {                        progressDialog.setMessage("数据上传中，请稍候");                        progressDialog.show();                    }                    @Override                    public void onNext(ResponseBody responseBody) {                        try {                            JSONObject jsonObject = new JSONObject(responseBody.string().toString());                            if (jsonObject.getString("result").equals("true")) {                                JSONArray jsonArray = jsonObject.getJSONArray("data");                                if (null != jsonArray && jsonArray.length() != 0) {                                    for (int i = 0; i < jsonArray.length(); i++) {                                        JSONObject item = jsonArray.getJSONObject(i);                                        SPUtils user_sp = SPUtils.getInstance(item.getString("pfpIds"));                                        fpp.fpDownTemplate(item.getString("pfpIds"), item.getString("fingerTemp"));                                        user_sp.put("courIds", item.getString("personIds"));                                        user_sp.put("name", item.getString("name"));                                        user_sp.put("cardId", item.getString("idcard"));                                        user_sp.put("courType", item.getString("courType"));                                    }                                    ToastUtils.showLong("设备数据更新成功");                                } else {                                    ToastUtils.showLong("该设备号无人员数据");                                }                            } else {                                ToastUtils.showLong("设备号有误");                            }                        } catch (JSONException e) {                            e.printStackTrace();                        } catch (IOException e) {                            e.printStackTrace();                        }                    }                    @Override                    public void onError(@NonNull Throwable e) {                        progressDialog.dismiss();                        tv_info.setText("无法连接到服务器");                    }                    @Override                    public void onComplete() {                        progressDialog.dismiss();                        fpp.fpIdentify();                    }                });    }    private void OpenDoorRecord(boolean leagl) {        final JSONObject jsonObject = new JSONObject();        if (leagl) {            try {                jsonObject.put("courIds1", cg_User1.getCourIds());                jsonObject.put("courIds2", cg_User2.getCourIds());                jsonObject.put("id1", cg_User1.getCardId());                jsonObject.put("id2", cg_User2.getCardId());                jsonObject.put("name1", cg_User1.getName());                jsonObject.put("name2", cg_User2.getName());                jsonObject.put("photo1", cg_User1.getPhoto());                jsonObject.put("photo2", cg_User2.getPhoto());                jsonObject.put("datetime", TimeUtils.getNowString());                jsonObject.put("state", "y");            } catch (JSONException e) {                e.printStackTrace();            }        } else {            try {                jsonObject.put("datetime", TimeUtils.getNowString());                jsonObject.put("state", "n");            } catch (JSONException e) {                e.printStackTrace();            }        }        final ProgressDialog progressDialog = new ProgressDialog(IndexActivity.this);        RetrofitGenerator.getOpenDoorRecordApi().   openDoorRecord("openDoorRecord", config.getString("key"), jsonObject.toString())                .subscribeOn(Schedulers.io())                .unsubscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe(new Observer<String>() {                    @Override                    public void onSubscribe(@NonNull Disposable d) {                        progressDialog.setMessage("数据上传中，请稍候");                        progressDialog.show();                    }                    @Override                    public void onNext(String s) {                        if (s.equals("true")) {                            try{                                if(jsonObject.getString("state").equals("y")){                                    tv_info.setText("正常开门数据上传成功");                                }else{                                    tv_info.setText("非法开门数据上传成功");                                }                            }catch (JSONException e){                                e.printStackTrace();                            }                        } else if (s.equals("false")) {                            tv_info.setText("开门数据上传失败");                        } else if (s.equals("dataErr")) {                            tv_info.setText("上传的json数据有错");                        } else if (s.equals("dbErr")) {                            tv_info.setText("数据库操作有错");                        }                    }                    @Override                    public void onError(@NonNull Throwable e) {                        e.printStackTrace();                        progressDialog.dismiss();                        tv_info.setText("无法连接到服务器");                    }                    @Override                    public void onComplete() {                        progressDialog.dismiss();                        cg_User1 = new User();                        cg_User2 = new User();                    }                });    }}