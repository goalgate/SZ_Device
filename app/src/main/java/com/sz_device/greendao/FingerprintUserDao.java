package com.sz_device.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sz_device.Bean.FingerprintUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINGERPRINT_USER".
*/
public class FingerprintUserDao extends AbstractDao<FingerprintUser, Long> {

    public static final String TABLENAME = "FINGERPRINT_USER";

    /**
     * Properties of entity FingerprintUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CourIds = new Property(1, String.class, "courIds", false, "COUR_IDS");
        public final static Property CardId = new Property(2, String.class, "cardId", false, "CARD_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property FingerprintPhoto = new Property(4, String.class, "fingerprintPhoto", false, "FINGERPRINT_PHOTO");
        public final static Property FingerprintId = new Property(5, String.class, "fingerprintId", false, "FINGERPRINT_ID");
        public final static Property FingerprintKey = new Property(6, String.class, "fingerprintKey", false, "FINGERPRINT_KEY");
        public final static Property CourType = new Property(7, String.class, "courType", false, "COUR_TYPE");
        public final static Property Headphoto = new Property(8, String.class, "headphoto", false, "HEADPHOTO");
    }


    public FingerprintUserDao(DaoConfig config) {
        super(config);
    }
    
    public FingerprintUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINGERPRINT_USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"COUR_IDS\" TEXT," + // 1: courIds
                "\"CARD_ID\" TEXT," + // 2: cardId
                "\"NAME\" TEXT," + // 3: name
                "\"FINGERPRINT_PHOTO\" TEXT," + // 4: fingerprintPhoto
                "\"FINGERPRINT_ID\" TEXT UNIQUE ," + // 5: fingerprintId
                "\"FINGERPRINT_KEY\" TEXT," + // 6: fingerprintKey
                "\"COUR_TYPE\" TEXT," + // 7: courType
                "\"HEADPHOTO\" TEXT);"); // 8: headphoto
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINGERPRINT_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FingerprintUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String courIds = entity.getCourIds();
        if (courIds != null) {
            stmt.bindString(2, courIds);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(3, cardId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String fingerprintPhoto = entity.getFingerprintPhoto();
        if (fingerprintPhoto != null) {
            stmt.bindString(5, fingerprintPhoto);
        }
 
        String fingerprintId = entity.getFingerprintId();
        if (fingerprintId != null) {
            stmt.bindString(6, fingerprintId);
        }
 
        String fingerprintKey = entity.getFingerprintKey();
        if (fingerprintKey != null) {
            stmt.bindString(7, fingerprintKey);
        }
 
        String courType = entity.getCourType();
        if (courType != null) {
            stmt.bindString(8, courType);
        }
 
        String headphoto = entity.getHeadphoto();
        if (headphoto != null) {
            stmt.bindString(9, headphoto);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FingerprintUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String courIds = entity.getCourIds();
        if (courIds != null) {
            stmt.bindString(2, courIds);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(3, cardId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String fingerprintPhoto = entity.getFingerprintPhoto();
        if (fingerprintPhoto != null) {
            stmt.bindString(5, fingerprintPhoto);
        }
 
        String fingerprintId = entity.getFingerprintId();
        if (fingerprintId != null) {
            stmt.bindString(6, fingerprintId);
        }
 
        String fingerprintKey = entity.getFingerprintKey();
        if (fingerprintKey != null) {
            stmt.bindString(7, fingerprintKey);
        }
 
        String courType = entity.getCourType();
        if (courType != null) {
            stmt.bindString(8, courType);
        }
 
        String headphoto = entity.getHeadphoto();
        if (headphoto != null) {
            stmt.bindString(9, headphoto);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FingerprintUser readEntity(Cursor cursor, int offset) {
        FingerprintUser entity = new FingerprintUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // courIds
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fingerprintPhoto
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fingerprintId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fingerprintKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // courType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // headphoto
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FingerprintUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCourIds(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFingerprintPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFingerprintId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFingerprintKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCourType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeadphoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FingerprintUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FingerprintUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FingerprintUser entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
